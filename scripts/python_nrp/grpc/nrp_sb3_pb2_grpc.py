# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

#import nrp_sb3_pb2 as nrp__sb3__pb2
from . import nrp_sb3_pb2 as nrp__sb3__pb2


class ManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_NRP_data = channel.unary_unary(
                '/Manager/get_NRP_data',
                request_serializer=nrp__sb3__pb2.No_Param.SerializeToString,
                response_deserializer=nrp__sb3__pb2.Data.FromString,
                )
        self.get_SB3_actions = channel.unary_unary(
                '/Manager/get_SB3_actions',
                request_serializer=nrp__sb3__pb2.No_Param.SerializeToString,
                response_deserializer=nrp__sb3__pb2.Actions.FromString,
                )
        self.set_NRP_data = channel.unary_unary(
                '/Manager/set_NRP_data',
                request_serializer=nrp__sb3__pb2.Data.SerializeToString,
                response_deserializer=nrp__sb3__pb2.No_Param.FromString,
                )
        self.set_SB3_actions = channel.unary_unary(
                '/Manager/set_SB3_actions',
                request_serializer=nrp__sb3__pb2.Actions.SerializeToString,
                response_deserializer=nrp__sb3__pb2.No_Param.FromString,
                )


class ManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_NRP_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_SB3_actions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_NRP_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_SB3_actions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_NRP_data': grpc.unary_unary_rpc_method_handler(
                    servicer.get_NRP_data,
                    request_deserializer=nrp__sb3__pb2.No_Param.FromString,
                    response_serializer=nrp__sb3__pb2.Data.SerializeToString,
            ),
            'get_SB3_actions': grpc.unary_unary_rpc_method_handler(
                    servicer.get_SB3_actions,
                    request_deserializer=nrp__sb3__pb2.No_Param.FromString,
                    response_serializer=nrp__sb3__pb2.Actions.SerializeToString,
            ),
            'set_NRP_data': grpc.unary_unary_rpc_method_handler(
                    servicer.set_NRP_data,
                    request_deserializer=nrp__sb3__pb2.Data.FromString,
                    response_serializer=nrp__sb3__pb2.No_Param.SerializeToString,
            ),
            'set_SB3_actions': grpc.unary_unary_rpc_method_handler(
                    servicer.set_SB3_actions,
                    request_deserializer=nrp__sb3__pb2.Actions.FromString,
                    response_serializer=nrp__sb3__pb2.No_Param.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Manager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Manager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_NRP_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Manager/get_NRP_data',
            nrp__sb3__pb2.No_Param.SerializeToString,
            nrp__sb3__pb2.Data.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_SB3_actions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Manager/get_SB3_actions',
            nrp__sb3__pb2.No_Param.SerializeToString,
            nrp__sb3__pb2.Actions.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_NRP_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Manager/set_NRP_data',
            nrp__sb3__pb2.Data.SerializeToString,
            nrp__sb3__pb2.No_Param.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_SB3_actions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Manager/set_SB3_actions',
            nrp__sb3__pb2.Actions.SerializeToString,
            nrp__sb3__pb2.No_Param.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
